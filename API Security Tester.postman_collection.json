{
	"info": {
		"_postman_id": "a8c3c1b6-918d-4c64-8470-154417fd771d",
		"name": "API Security Tester",
		"description": "# Overview\n\nAPI Security Tester is collection enabling you to automatically test your API's for security vulnerabilities directly within your Postman IDE using WhiteHat Security's [Intelligent Directed DAST (ID-DAST)](https://www.whitehatsec.com).  ID-DAST checks primarily for [OWASP API Top 10 vulnerabilities](https://owasp.org/www-project-api-security/) such as SQL Injection and XSS.\n\n# Installation\n\n## Docker\n\nID-DAST utilizes a Docker container to perform the vulnerability testing. Running this container requires you to accept the [end user license agreement](https://www.whitehatsec.com) by setting the `WHITEHAT_ACCEPT_EULA` enviroment variable to `y`. Pull and run the container and accept the EULA by executing the following commands:\n\n```\n$> docker pull whsinnovations/dast-attacker-api:latest\n$> docker run -p 27374:27374 -e WHITEHAT_ACCEPT_EULA=y whsinnovations/dast-attacker-api:latest\n```\n\n*Note:* Windows users will need to enable support for Linux containers by following the [official Ubuntu documentation](https://ubuntu.com/tutorials/windows-ubuntu-hyperv-containers).\n\n# Usage\n\nPerform the following steps to run a vulnerability scan on your API:\n\n## Export Your Collection\n\nExport the collection you wish to test by right clicking on the collection and selecting \"Export\". Choose \"Collection v2.1\" and save it to Postman's working directory.\n\n## Configure Your Scan\n\nIn the API Security Tester collection, select the \"Submit Scan Job\" function and select the \"Body\" tab. Using the parameter name \"inputFiles\", click \"Select Files\" and browse to the collection you exported.  Select the \"Headers\" tab and set the value of the \"X-WhiteHat-License-Key\" header to that of your license key. Once these steps are completed, click \"Save\" to ensure your changes are applied.\n\n## Run the Scan\n\nRun the collection by using the \"Collection Runner\" on the API Security Scan collection as described within the [official Postman documentation](https://learning.postman.com/docs/running-collections/intro-to-collection-runs/). This will start the scan and poll the status until it is marked as complete. You will know the scan is complete when the Collection Runner is finished with all tests passing.\n\n## View the Results\n\nClose the Connection Runner and click the \"Display Scan Results\" function. Click \"Send\" to obtain the latest copy of the scan results. From within \"Display Scan Results\", click the \"Visualize\" tab to view discovered vulnerabilities within your API.\n\n# Known Issues\n\n- Visualizer does not correctly render `select` options: [see #9187](https://github.com/postmanlabs/postman-app-support/issues/9187)\n\n# FAQ #\n\n## How do I configure the hosts that can be scanned?\n\nIf you have a commercial license and your HAR file references an API hosted somewhere other than localhost, then you'll need to add one or more \"allowedHosts\" parameters to the body of \"Submit Scan Request\". By way of example, if your API is running on the host \"foo.bar.com\", then you'll need to add a parameter called \"allowedHosts\" with a value of \"foo.bar.com\".\n\n## I attempted to run the Collection but got a CONNECTION REFUSED error - what's up?\n\nVerify that the ID-DAST API and the API you are testing are up and running as this is usually the result of ID-DAST not being able to connect to your API.\n\n## I am getting errors when Postman attempts to open local files - what's up?\n\nYou'll need to configure the working directory within Postman as described in the [Getting Started](https://learning.postman.com/docs/getting-started/settings/) documentation.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Submit Scan Job",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"if (pm.response.code !== 201) {",
							"    throw new Error('unexpected status code (' + pm.response.code + '): ensure the container is running and your \"Body\" configuration is correct');",
							"}",
							"",
							"let location = pm.response.headers.get(\"Location\");",
							"if (!location || location == '') {",
							"    throw new Error('scan submission failed: no job was created - location header missing');",
							"}",
							"",
							"let index = location.lastIndexOf(\"/\");",
							"let jobID = location.substring(index + 1);",
							"pm.collectionVariables.set(\"jobID\", jobID);",
							"",
							"console.log('submit: successfully started scan with jobID: ' + jobID);",
							"",
							"pm.test(\"successfully submitted scan job\", function() {",
							"    pm.response.to.have.status(201);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "X-WhiteHat-License-Key",
						"value": "574364e7-1e14-48f4-adff-1c523057cfa9",
						"type": "text",
						"description": "license key is required for security scanning"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "inputFiles",
							"description": "Postman collection referencing the API you wish to test",
							"type": "file",
							"src": []
						}
					]
				},
				"url": {
					"raw": "{{apiHost}}/api/v1/scan",
					"host": [
						"{{apiHost}}"
					],
					"path": [
						"api",
						"v1",
						"scan"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Scan Status",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// verify status",
							"if (pm.response.code != 200) {",
							"    throw new Error('invalid response code: ' + pm.response.code);",
							"}",
							"",
							"// wait until job is finished",
							"let message = pm.response.json();",
							"let job = message.scanJob;",
							"let finished = false;",
							"",
							"if (!job) {",
							"    console.log('poll: job not yet started...');",
							"} else if (job.status != 'succeeded' && job.status != 'failed') {",
							"    let vulnerabilities = job.scan.vulnerabilities ? job.scan.vulnerabilities.length : 0;",
							"    console.log('poll: job is still running... (vulnerabilities:' + vulnerabilities + ')');",
							"} else {",
							"    finished = true;",
							"",
							"    let vulnerabilities = job.scan.vulnerabilities ? job.scan.vulnerabilities.length : 0;",
							"    console.log('poll: scan completed with status of \"' + job.status + '\" (vulnerabilities:' + vulnerabilities + ')');",
							"",
							"    if (job.error) {",
							"        throw new Error('scan job failed: ' + job.error);",
							"    }",
							"}",
							"",
							"// poll if not finished",
							"if (!finished) {",
							"    setTimeout(() => {}, 1000);",
							"    postman.setNextRequest(pm.info.requestId);",
							"    return;",
							"}",
							"",
							"pm.test(\"successfully obtained scan status\", function() {",
							"    pm.response.to.have.status(200);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{apiHost}}/api/v1/scan/{{jobID}}",
					"host": [
						"{{apiHost}}"
					],
					"path": [
						"api",
						"v1",
						"scan",
						"{{jobID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Display Scan Results",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// verify status",
							"if (pm.response.code != 200) {",
							"    throw new Error('invalid response code: ' + pm.response.code);",
							"}",
							"",
							"// verify job is finished",
							"let message = pm.response.json();",
							"let job = message.scanJob;",
							"if (!job) {",
							"    throw new Error('scan job is undefined');",
							"} else if (job.status != 'succeeded' && job.status != 'failed') {",
							"    throw new Error('scan job has unexpected status of \"' + job.status + '\"');",
							"}",
							"if (job.error) {",
							"    throw new Error('scan job failed: ' + job.error);",
							"}",
							"",
							"console.log('results: rendering scan with status of \"' + job.status + '\" (vulnerabilities:' + job.scan.vulnerabilities.length + ')');",
							"",
							"// render results",
							"let apiHost = pm.variables.get(\"apiHost\");",
							"let jobID = job.id;",
							"",
							"let template = `",
							"<script>",
							"    window.location.href='${apiHost}/api/v1/report/postman?scanID=${jobID}';",
							"</script>",
							"`;",
							"",
							"pm.visualizer.set(template, job);",
							"",
							"pm.test('successfully displayed scan results: head over to the \"Visualize\" tab under \"Body\" to triage the results', function() {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{apiHost}}/api/v1/scan/{{jobID}}",
					"host": [
						"{{apiHost}}"
					],
					"path": [
						"api",
						"v1",
						"scan",
						"{{jobID}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "apiHost",
			"value": "http://localhost:27374"
		},
		{
			"key": "jobID",
			"value": ""
		}
	]
}