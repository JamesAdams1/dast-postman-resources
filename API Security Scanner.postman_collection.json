{
	"info": {
		"_postman_id": "46733e4e-6a73-4726-a239-f256af459d0d",
		"name": "API Security Scanner",
		"description": "# Overview\n\n\"API Security Scanner\" is Collection enabling you to automatically test your API for security vulnerabilities from directly within your Postman IDE using WhiteHat Security's [Intelligent Directed DAST (ID-DAST)](https://www.whitehatsec.com).\n\n# Installation\n\nID-DAST must be installed and running on your host before you can make use of this Collection.\n\n## Docker\n\nYou can download run the ID-DAST API Linux based Docker container by executing the following commands:\n\n```\n$> docker pull whsinnovations/dast-attacker-api:latest\n$> docker run -p 27374:27374 whsinnovations/dast-attacker-api:latest\n```\n\nYou can verify the container is up and running by checking if TCP port `27374` is open and ready to accept connections:\n\n```\n$> netstat -an | grep 27374\n```\n\n*Note:* Windows users will need to enable support for Linux containers by following the [official Ubuntu documentation](https://ubuntu.com/tutorials/windows-ubuntu-hyperv-containers).\n\n# Utilization\n\nPerform the following steps to successfully execute this Collection: Record a HAR File, Configure the Scan, Run the Scan, Triage the Results\n\n## Record a HAR File\n\nYou will need to record a HTTP Archive (HAR) file associated with the collection that you wish to test. This can be achieved using technologies such as [Postman Interceptor](https://www.postman.com/product/postman-interceptor/) and [mitmproxy](https://mitmproxy.org/). By way of example, consider the following steps using mitmproxy:\n\n1. Install mitmproxy by following their [instructions](https://docs.mitmproxy.org/stable/overview-installation/).\n1. Download the [har_dump.py](https://github.com/mitmproxy/mitmproxy/blob/master/examples/contrib/har_dump.py) script to your local folder.\n1. Run mitmdump on port 8080 to export the traffic as a HAR file: `mitmdump -s ./har_dump.py --set hardump=./postman.har`\n1. Configure Postman to use a proxy on 127.0.0.1:8080 by following their [instructions](https://learning.postman.com/docs/sending-requests/capturing-request-data/proxy/).\n1. Run your Collection as you normally would. Once finished, stop the `mitmdump` process and note the newly created `postman.har` file.\n1. Make sure to disable the Postman proxy configuration before moving onto the next step.\n\n*Note:* Wouldn't it be easier if Postman could export the results of the Collection Runner directly to a HAR file so that you don't have to use a proxy? We certainly think so! If you agree, please head over to the [corresponding feature request](https://github.com/postmanlabs/postman-app-support/issues/9242) and give it an up vote.\n\n## Configure the Scan\n\nSelect the \"Submit Scan Job\" request and click the \"Body\" tab. Using the parameter name \"inputFiles\", add an individual entry for each HAR file that you want included in the scan. By way of example, the `postman.har` file captured in the previous step would be supplied here.\n\n## Run the Scan\n\nRun the collection by following the [official Postman documentation](https://learning.postman.com/docs/running-collections/intro-to-collection-runs/). This will enqueue the scan and poll the scan status until it is marked as complete. You will know the scan is complete when the Collection Runner is finished with all tests passing. Close the Connection Runner once finished.\n\n## Triage the Results\n\nClick the \"Display Scan Results\" request and click \"Send\" to obtain the latest copy of the scan results. From within \"Display Scan Results\", click the \"Visualize\" tab to triage any and all identified vulnerabilities from within a Postman.\n\n# Known Issues\n\n- Postman does not natively export to HAR file format: [see #9242](https://github.com/postmanlabs/postman-app-support/issues/9242)\n- Visualizer does not correctly render `select` options: [see #9187](https://github.com/postmanlabs/postman-app-support/issues/9187)\n- Visualizer does not support playing embedded videos: [see #9243](https://github.com/postmanlabs/postman-app-support/issues/9243)\n\n# FAQ #\n\n## What are the limitations of the 'Free' version?\n\nFree versions are limited to scanning localhost applications only with a limited number of scans per month. You can scan non-localhost applications and increase the number of scans per month by [obtaining a commercial license](https://www.whitehatsec.com).\n\n## How do I configure the hosts that can be scanned?\n\nIf you have a commercial license and your HAR file references an API hosted somewhere other than localhost, then you'll need to add one or more \"allowedHosts\" parameters to the body of \"Submit Scan Request\". By way of example, if your API is running on the host \"foo.bar.com\", then you'll need to add a parameter called \"allowedHosts\" with a value of \"foo.bar.com\".\n\n## I attempted to run the Collection but got a CONNECTION REFUSED error - what's up?\n\nMake sure you disabled the proxy configuration that you used to generate a HAR file in the `Record a HAR File` step before moving onto the `Configure the Scan` step. Also verify that the ID-DAST API and the API you are testing are up and running.\n\n## I am getting errors when Postman attempts to open local files - what's up?\n\nYou'll need to configure the working directory within Postman as described in the [Getting Started](https://learning.postman.com/docs/getting-started/settings/) documentation.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Submit Scan Job",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "7937c824-f19b-46c8-a6c6-889710ce9bc4",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "02f88e23-6744-4983-85c8-d763d6cb973f",
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"let location = pm.response.headers.get(\"Location\");",
							"let index = location.lastIndexOf(\"/\");",
							"let jobID = location.substring(index + 1);",
							"pm.collectionVariables.set(\"jobID\", jobID);",
							"",
							"console.log('submit: successfully started scan with jobID: ' + jobID);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "inputFiles",
							"type": "file",
							"src": "postman.har"
						}
					],
					"options": {
						"formdata": {}
					}
				},
				"url": {
					"raw": "{{apiHost}}/api/v1/scan",
					"host": [
						"{{apiHost}}"
					],
					"path": [
						"api",
						"v1",
						"scan"
					]
				}
			},
			"response": []
		},
		{
			"name": "Wait for Scan to Complete",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "d3e8acf5-c7b3-464c-8d9a-d40f425226b8",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "e907cda8-2246-44f0-8fa5-3d66c0afdf94",
						"exec": [
							"// verify status",
							"if (pm.response.code != 200) {",
							"    throw new Error('invalid response code: ' + pm.response.code);",
							"}",
							"",
							"// wait until job is finished",
							"let message = pm.response.json();",
							"let job = message.scanJob;",
							"let finished = false;",
							"",
							"if (!job) {",
							"    console.log('poll: job not yet started...');",
							"} else if (job.status != 'succeeded' && job.status != 'failed') {",
							"    console.log('poll: job is still running... (vulnerabilities:' + job.vulnerabilities.length + ')');",
							"} else {",
							"    finished = true;",
							"    console.log('poll: scan completed with status of \"' + job.status + '\" (vulnerabilities:' + job.vulnerabilities.length + ')');",
							"}",
							"",
							"// poll if not finished",
							"if (!finished) {",
							"    setTimeout(() => {}, 1000);",
							"    postman.setNextRequest(pm.info.requestId);",
							"    return;",
							"}",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{apiHost}}/api/v1/scan/{{jobID}}",
					"host": [
						"{{apiHost}}"
					],
					"path": [
						"api",
						"v1",
						"scan",
						"{{jobID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Display Scan Results",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "fb2f000a-a336-4af0-be94-f336eb625c37",
						"exec": [
							"// verify status",
							"if (pm.response.code != 200) {",
							"    throw new Error('invalid response code: ' + pm.response.code);",
							"}",
							"",
							"// verify job is finished",
							"let message = pm.response.json();",
							"let job = message.scanJob;",
							"if (!job || (job.status != 'succeeded' && job.status != 'failed')) {",
							"    throw new Error('bad scan job');",
							"}",
							"console.log('results: rendering scan with status of \"' + job.status + '\" (vulnerabilities:' + job.vulnerabilities.length + ')');",
							"",
							"// render results",
							"let apiHost = pm.variables.get(\"apiHost\");",
							"let jobID = job.id;",
							"",
							"let template = `",
							"<script>",
							"    window.location.href='${apiHost}/api/v1/report/postman?scanID=${jobID}';",
							"</script>",
							"`;",
							"",
							"pm.visualizer.set(template, job);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "6dc74d08-7a69-435e-b570-2727070058ff",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{apiHost}}/api/v1/scan/{{jobID}}",
					"host": [
						"{{apiHost}}"
					],
					"path": [
						"api",
						"v1",
						"scan",
						"{{jobID}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "f8959b61-1fea-4552-bb00-45eebeb1d8e6",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "4ef8f979-3d2e-4959-9039-19d1e8130c0f",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "92c1bda2-5f6b-4f1d-b83d-8545683a870d",
			"key": "apiHost",
			"value": "http://localhost:27374"
		},
		{
			"id": "3798ffe1-0159-43c8-ae21-b28a259c03d5",
			"key": "jobID",
			"value": ""
		}
	],
	"protocolProfileBehavior": {}
}